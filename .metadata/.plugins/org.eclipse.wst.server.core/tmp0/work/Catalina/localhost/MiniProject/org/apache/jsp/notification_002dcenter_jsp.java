/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.28
 * Generated at: 2024-09-11 15:39:08 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import com.gnit.DatabaseFile.DbConnection;

public final class notification_002dcenter_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(8);
    _jspx_imports_classes.add("java.sql.SQLException");
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("com.gnit.DatabaseFile.DbConnection");
    _jspx_imports_classes.add("java.sql.Statement");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>Notification Center</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            padding: 0;\r\n");
      out.write("            background-color: #f5f5f5;\r\n");
      out.write("            background-image: url('https://www.transparenttextures.com/patterns/white-diamond.png');\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .container {\r\n");
      out.write("            max-width: 600px;\r\n");
      out.write("            margin: 20px auto;\r\n");
      out.write("            padding: 20px;\r\n");
      out.write("            border-radius: 8px;\r\n");
      out.write("            background-color: #ffffff;\r\n");
      out.write("            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n");
      out.write("        }\r\n");
      out.write("        h2 {\r\n");
      out.write("            font-size: 22px;\r\n");
      out.write("            color: #333;\r\n");
      out.write("            margin-bottom: 15px;\r\n");
      out.write("        }\r\n");
      out.write("        .faculty-list {\r\n");
      out.write("            margin-bottom: 20px;\r\n");
      out.write("        }\r\n");
      out.write("        .faculty-list label {\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("            font-weight: bold;\r\n");
      out.write("            color: #555;\r\n");
      out.write("        }\r\n");
      out.write("        .faculty-names {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            flex-wrap: nowrap;\r\n");
      out.write("            overflow-x: auto;\r\n");
      out.write("            white-space: nowrap;\r\n");
      out.write("            gap: 10px;\r\n");
      out.write("            margin-bottom: 10px;\r\n");
      out.write("            padding: 10px 0;\r\n");
      out.write("            border: 1px solid #ddd;\r\n");
      out.write("            background-color: #f9f9f9;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            scrollbar-width: thin;\r\n");
      out.write("        }\r\n");
      out.write("        .faculty-names::-webkit-scrollbar {\r\n");
      out.write("            height: 8px;\r\n");
      out.write("        }\r\n");
      out.write("        .faculty-names::-webkit-scrollbar-thumb {\r\n");
      out.write("            background: #888;\r\n");
      out.write("            border-radius: 10px;\r\n");
      out.write("        }\r\n");
      out.write("        .faculty-names::-webkit-scrollbar-thumb:hover {\r\n");
      out.write("            background: #555;\r\n");
      out.write("        }\r\n");
      out.write("        .faculty-names span {\r\n");
      out.write("            background-color: #e7f0ff;\r\n");
      out.write("            padding: 8px 12px;\r\n");
      out.write("            border-radius: 20px;\r\n");
      out.write("            font-size: 14px;\r\n");
      out.write("            color: #333;\r\n");
      out.write("            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n");
      out.write("            display: inline-block;\r\n");
      out.write("            white-space: nowrap;\r\n");
      out.write("        }\r\n");
      out.write("        .text-area-container {\r\n");
      out.write("            margin-bottom: 20px;\r\n");
      out.write("        }\r\n");
      out.write("        input[type=\"date\"], input[type=\"time\"], textarea {\r\n");
      out.write("            width: calc(100% - 22px);\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            border: 1px solid #ccc;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            font-size: 14px;\r\n");
      out.write("            margin-bottom: 10px;\r\n");
      out.write("        }\r\n");
      out.write("        textarea {\r\n");
      out.write("            height: 150px;\r\n");
      out.write("            resize: vertical;\r\n");
      out.write("            background-color: #f9f9f9;\r\n");
      out.write("            border: 1px solid #ddd;\r\n");
      out.write("            color: #666;\r\n");
      out.write("        }\r\n");
      out.write("        label {\r\n");
      out.write("            font-size: 14px;\r\n");
      out.write("            margin-bottom: 5px;\r\n");
      out.write("            display: block;\r\n");
      out.write("            color: #555;\r\n");
      out.write("        }\r\n");
      out.write("        .submit-button {\r\n");
      out.write("            background-color: #4CAF50;\r\n");
      out.write("            color: #ffffff;\r\n");
      out.write("            padding: 10px 18px;\r\n");
      out.write("            border: none;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            font-size: 14px;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            transition: background-color 0.3s ease;\r\n");
      out.write("        }\r\n");
      out.write("        .submit-button:hover {\r\n");
      out.write("            background-color: #45a049;\r\n");
      out.write("        }\r\n");
      out.write("        .form-group {\r\n");
      out.write("            margin-bottom: 15px;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("    <h2> 📬 Notification Center 📣</h2>\r\n");
      out.write("    <form action=\"NotificationServlet\" method=\"post\">\r\n");
      out.write("        <div class=\"faculty-list\">\r\n");
      out.write("            <label>To:</label>\r\n");
      out.write("            <div class=\"faculty-names\">\r\n");
      out.write("                ");

                    Connection conn = null;
                    Statement stmt = null;
                    ResultSet rs = null;
                    int totalCount = 0;
                    String examDate = "";
                    String examTime = "";

                    try {
                        conn = DbConnection.getConnection();
                        stmt = conn.createStatement();
                        String query = "SELECT f.name, f.email, a.exam_date, a.timing " +
                                       "FROM faculty f JOIN faculty_allocation a ON f.id = a.faculty_id " +
                                       "WHERE a.archived = 0";
                        rs = stmt.executeQuery(query);

                        while (rs.next()) {
                            String facultyName = rs.getString("name");
                            String email = rs.getString("email");
                            examDate = rs.getDate("exam_date") != null ? new SimpleDateFormat("yyyy-MM-dd").format(rs.getDate("exam_date")) : "";
                            examTime = rs.getTime("timing") != null ? new SimpleDateFormat("HH:mm").format(rs.getTime("timing")) : "";
                            totalCount++;
                
      out.write("\r\n");
      out.write("                <span>");
      out.print( facultyName );
      out.write(' ');
      out.write('(');
      out.print( email );
      out.write(")</span>\r\n");
      out.write("                ");

                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                    } finally {
                        try {
                            if (rs != null) rs.close();
                            if (stmt != null) stmt.close();
                            if (conn != null) conn.close();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                
      out.write("\r\n");
      out.write("            </div>\r\n");
      out.write("            <div>\r\n");
      out.write("                <strong>Total Count:</strong> ");
      out.print( totalCount );
      out.write("\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"form-group\">\r\n");
      out.write("            <label for=\"exam_date\">Exam Date:</label>\r\n");
      out.write("            <input type=\"date\" id=\"exam_date\" name=\"exam_date\" value=\"");
      out.print( examDate );
      out.write("\" required />\r\n");
      out.write("        </div>\r\n");
      out.write("        \r\n");
      out.write("        <div class=\"form-group\">\r\n");
      out.write("            <label for=\"exam_time\">Exam Timing:</label>\r\n");
      out.write("            <input type=\"time\" id=\"exam_time\" name=\"exam_time\" value=\"");
      out.print( examTime );
      out.write("\" required />\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"form-group\">\r\n");
      out.write("            <label for=\"message\">Message:</label>\r\n");
      out.write("            <textarea id=\"message\" name=\"message\" readonly>\r\n");
      out.write("                Dear [Faculty Name],\r\n");
      out.write("\r\n");
      out.write("                This is a notification regarding your Exam invigilator duty allocation:\r\n");
      out.write("\r\n");
      out.write("                Exam Date: [exam_date]\r\n");
      out.write("                Room Number: [room_number]\r\n");
      out.write("                Block: [block]\r\n");
      out.write("                Floor: [floor]\r\n");
      out.write("                Timing: [exam_time]\r\n");
      out.write("                Duration: [duration]\r\n");
      out.write("\r\n");
      out.write("                Best regards,\r\n");
      out.write("                Exam Branch Coordinator\r\n");
      out.write("            </textarea>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <button type=\"submit\" class=\"submit-button\">Send Mail</button>\r\n");
      out.write("    </form>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
